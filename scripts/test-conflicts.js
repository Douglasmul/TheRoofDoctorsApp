#!/usr/bin/env node

/**
 * Test script to create simulated merge conflicts for testing the resolution tool
 */

const fs = require('fs');
const path = require('path');

const SAMPLE_CONFLICTS = {
  'package.json': `{
  "name": "TheRoofDoctorsApp",
  "version": "1.0.0",
  "private": true,
  "main": "index.js",
  "scripts": {
<<<<<<< HEAD
    "test": "jest",
    "build": "expo build"
=======
    "test": "jest --coverage",
    "start": "expo start"
>>>>>>> main
  },
  "devDependencies": {
    "@react-native-community/cli": "latest",
<<<<<<< HEAD
    "@types/react-native": "^0.72.8",
    "typescript": "~5.8.3"
=======
    "@types/react-native": "^0.73.0",
    "typescript": "~5.9.0",
    "jest": "^29.0.0"
>>>>>>> main
  },
  "dependencies": {
    "@react-navigation/native": "^7.1.17",
    "@react-navigation/stack": "^7.4.7",
    "expo": "^53.0.20",
<<<<<<< HEAD
    "react-native-safe-area-context": "^5.6.0",
    "react-native-screens": "^4.14.1"
=======
    "react-native-safe-area-context": "^5.7.0",
    "react-native-screens": "^4.15.0",
    "react-native-gesture-handler": "^2.14.0"
>>>>>>> main
  }
}`,

  'package-lock.json': `{
  "name": "TheRoofDoctorsApp",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "TheRoofDoctorsApp",
      "version": "1.0.0",
      "dependencies": {
<<<<<<< HEAD
        "@react-navigation/native": "^7.1.17",
        "@react-navigation/stack": "^7.4.7"
=======
        "@react-navigation/native": "^7.1.18",
        "@react-navigation/stack": "^7.4.8"
>>>>>>> main
      }
    }
  }
}`,

  'yarn.lock': `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

"@react-navigation/native@^7.1.17":
<<<<<<< HEAD
  version "7.1.17"
  resolved "https://registry.npmjs.org/@react-navigation/native/-/native-7.1.17.tgz"
=======
  version "7.1.18"
  resolved "https://registry.npmjs.org/@react-navigation/native/-/native-7.1.18.tgz"
>>>>>>> main
  dependencies:
    "@react-navigation/core" "^7.1.1"`
};

class ConflictSimulator {
  constructor(projectRoot = process.cwd()) {
    this.projectRoot = projectRoot;
    this.backupSuffix = '.original-backup';
  }

  /**
   * Create backups of original files
   */
  createBackups() {
    console.log('üìã Creating backups of original files...\n');
    
    for (const fileName of Object.keys(SAMPLE_CONFLICTS)) {
      const filePath = path.join(this.projectRoot, fileName);
      const backupPath = filePath + this.backupSuffix;
      
      if (fs.existsSync(filePath)) {
        fs.copyFileSync(filePath, backupPath);
        console.log(`‚úÖ Backed up ${fileName} to ${fileName}${this.backupSuffix}`);
      }
    }
  }

  /**
   * Restore original files from backups
   */
  restoreBackups() {
    console.log('\nüîÑ Restoring original files...\n');
    
    for (const fileName of Object.keys(SAMPLE_CONFLICTS)) {
      const filePath = path.join(this.projectRoot, fileName);
      const backupPath = filePath + this.backupSuffix;
      
      if (fs.existsSync(backupPath)) {
        fs.copyFileSync(backupPath, filePath);
        fs.unlinkSync(backupPath);
        console.log(`‚úÖ Restored ${fileName}`);
      }
    }
  }

  /**
   * Create simulated merge conflicts
   */
  createConflicts() {
    console.log('‚ö†Ô∏è  Creating simulated merge conflicts...\n');
    
    for (const [fileName, conflictedContent] of Object.entries(SAMPLE_CONFLICTS)) {
      const filePath = path.join(this.projectRoot, fileName);
      fs.writeFileSync(filePath, conflictedContent, 'utf8');
      console.log(`‚ùå Created conflicts in ${fileName}`);
    }
  }

  /**
   * Run the test simulation
   */
  async runTest() {
    console.log('üß™ Starting merge conflict simulation test...\n');
    
    try {
      // Step 1: Backup originals
      this.createBackups();
      
      // Step 2: Create conflicts
      this.createConflicts();
      
      console.log('\nüîç Conflicts created! You can now run:');
      console.log('   node scripts/resolve-merge-conflicts.js');
      console.log('\nTo restore original files run:');
      console.log('   node scripts/test-conflicts.js --restore');
      
    } catch (error) {
      console.error('‚ùå Error during simulation:', error.message);
      this.restoreBackups();
      throw error;
    }
  }

  /**
   * Run restoration
   */
  async runRestore() {
    console.log('üîÑ Restoring original files...\n');
    this.restoreBackups();
    console.log('\n‚úÖ Original files restored!');
  }
}

// CLI interface
if (require.main === module) {
  const simulator = new ConflictSimulator();
  const isRestore = process.argv.includes('--restore');
  
  if (isRestore) {
    simulator.runRestore().catch(error => {
      console.error('‚ùå Error:', error.message);
      process.exit(1);
    });
  } else {
    simulator.runTest().catch(error => {
      console.error('‚ùå Error:', error.message);
      process.exit(1);
    });
  }
}

module.exports = ConflictSimulator;
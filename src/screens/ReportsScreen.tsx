import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, Share, Alert } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { COMPANY_INFO } from '../constants/company';

interface ReportData {
  measurements: {
    total: number;
    thisMonth: number;
    avgAccuracy: number;
    totalArea: number;
  };
  quotes: {
    total: number;
    thisMonth: number;
    totalValue: number;
    avgQuoteValue: number;
    conversionRate: number;
  };
  revenue: {
    thisMonth: number;
    lastMonth: number;
    growth: number;
  };
}

type ReportPeriod = 'today' | 'week' | 'month' | 'quarter' | 'year';
type ReportType = 'overview' | 'measurements' | 'quotes' | 'revenue';

export default function ReportsScreen() {
  const navigation = useNavigation();
  const [selectedPeriod, setSelectedPeriod] = useState<ReportPeriod>('month');
  const [selectedReport, setSelectedReport] = useState<ReportType>('overview');
  const [reportData, setReportData] = useState<ReportData>({
    measurements: {
      total: 147,
      thisMonth: 23,
      avgAccuracy: 96.2,
      totalArea: 15847.5,
    },
    quotes: {
      total: 89,
      thisMonth: 15,
      totalValue: 342150,
      avgQuoteValue: 3845,
      conversionRate: 68.5,
    },
    revenue: {
      thisMonth: 45200,
      lastMonth: 38900,
      growth: 16.2,
    },
  });

  const periods = [
    { key: 'today', label: 'Today' },
    { key: 'week', label: 'This Week' },
    { key: 'month', label: 'This Month' },
    { key: 'quarter', label: 'This Quarter' },
    { key: 'year', label: 'This Year' },
  ];

  const reportTypes = [
    { key: 'overview', label: 'Overview', icon: 'üìä' },
    { key: 'measurements', label: 'Measurements', icon: 'üìè' },
    { key: 'quotes', label: 'Quotes', icon: 'üí∞' },
    { key: 'revenue', label: 'Revenue', icon: 'üìà' },
  ];

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(amount);
  };

  const formatNumber = (num: number, decimals = 0) => {
    return new Intl.NumberFormat('en-US', {
      maximumFractionDigits: decimals,
    }).format(num);
  };

  const generateReportText = () => {
    const periodLabel = periods.find(p => p.key === selectedPeriod)?.label || 'This Month';
    
    return `
BUSINESS REPORT - ${COMPANY_INFO.name}
Period: ${periodLabel}
Generated: ${new Date().toLocaleDateString()}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

MEASUREMENT METRICS
‚Ä¢ Total Measurements: ${reportData.measurements.total}
‚Ä¢ This Period: ${reportData.measurements.thisMonth}
‚Ä¢ Average Accuracy: ${reportData.measurements.avgAccuracy}%
‚Ä¢ Total Area Measured: ${formatNumber(reportData.measurements.totalArea)} sq ft

QUOTE PERFORMANCE  
‚Ä¢ Total Quotes Generated: ${reportData.quotes.total}
‚Ä¢ This Period: ${reportData.quotes.thisMonth}
‚Ä¢ Total Quote Value: ${formatCurrency(reportData.quotes.totalValue)}
‚Ä¢ Average Quote Value: ${formatCurrency(reportData.quotes.avgQuoteValue)}
‚Ä¢ Conversion Rate: ${reportData.quotes.conversionRate}%

REVENUE SUMMARY
‚Ä¢ This Month: ${formatCurrency(reportData.revenue.thisMonth)}
‚Ä¢ Last Month: ${formatCurrency(reportData.revenue.lastMonth)}
‚Ä¢ Growth: ${reportData.revenue.growth > 0 ? '+' : ''}${reportData.revenue.growth}%

Generated by ${COMPANY_INFO.app.displayName}
    `.trim();
  };

  const handleExportReport = async (format: 'pdf' | 'csv' | 'share') => {
    try {
      if (format === 'share') {
        await Share.share({
          message: generateReportText(),
          title: `Business Report - ${COMPANY_INFO.name}`,
        });
      } else {
        Alert.alert(
          'Export Report',
          `${format.toUpperCase()} export functionality will be implemented in the next update.`,
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      console.error('Export error:', error);
      Alert.alert('Export Failed', 'Unable to export report. Please try again.');
    }
  };

  const renderOverview = () => (
    <View style={styles.reportContent}>
      <View style={styles.metricsGrid}>
        <View style={styles.metricCard}>
          <Text style={styles.metricIcon}>üìè</Text>
          <Text style={styles.metricValue}>{reportData.measurements.thisMonth}</Text>
          <Text style={styles.metricLabel}>Measurements</Text>
          <Text style={styles.metricSubtext}>{reportData.measurements.avgAccuracy}% avg accuracy</Text>
        </View>

        <View style={styles.metricCard}>
          <Text style={styles.metricIcon}>üí∞</Text>
          <Text style={styles.metricValue}>{reportData.quotes.thisMonth}</Text>
          <Text style={styles.metricLabel}>Quotes</Text>
          <Text style={styles.metricSubtext}>{reportData.quotes.conversionRate}% conversion</Text>
        </View>

        <View style={styles.metricCard}>
          <Text style={styles.metricIcon}>üìà</Text>
          <Text style={styles.metricValue}>{formatCurrency(reportData.revenue.thisMonth)}</Text>
          <Text style={styles.metricLabel}>Revenue</Text>
          <Text style={[
            styles.metricSubtext,
            { color: reportData.revenue.growth >= 0 ? '#22c55e' : '#ef4444' }
          ]}>
            {reportData.revenue.growth >= 0 ? '+' : ''}{reportData.revenue.growth}% growth
          </Text>
        </View>

        <View style={styles.metricCard}>
          <Text style={styles.metricIcon}>üìä</Text>
          <Text style={styles.metricValue}>{formatNumber(reportData.measurements.totalArea)}</Text>
          <Text style={styles.metricLabel}>Total Area (sq ft)</Text>
          <Text style={styles.metricSubtext}>All time</Text>
        </View>
      </View>

      <View style={styles.summarySection}>
        <Text style={styles.summaryTitle}>Performance Summary</Text>
        <Text style={styles.summaryText}>
          This month you completed {reportData.measurements.thisMonth} measurements and generated{' '}
          {reportData.quotes.thisMonth} quotes worth {formatCurrency(reportData.quotes.totalValue)}.
          Your measurement accuracy of {reportData.measurements.avgAccuracy}% exceeds industry standards.
        </Text>
      </View>
    </View>
  );

  const renderMeasurements = () => (
    <View style={styles.reportContent}>
      <View style={styles.detailSection}>
        <Text style={styles.detailTitle}>Measurement Analytics</Text>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>Total Measurements:</Text>
          <Text style={styles.detailValue}>{reportData.measurements.total}</Text>
        </View>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>This Period:</Text>
          <Text style={styles.detailValue}>{reportData.measurements.thisMonth}</Text>
        </View>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>Average Accuracy:</Text>
          <Text style={styles.detailValue}>{reportData.measurements.avgAccuracy}%</Text>
        </View>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>Total Area Measured:</Text>
          <Text style={styles.detailValue}>{formatNumber(reportData.measurements.totalArea)} sq ft</Text>
        </View>
      </View>

      <View style={styles.insightSection}>
        <Text style={styles.insightTitle}>üìä Insights</Text>
        <Text style={styles.insightText}>
          ‚Ä¢ Your measurement accuracy is {reportData.measurements.avgAccuracy - 90}% above average
        </Text>
        <Text style={styles.insightText}>
          ‚Ä¢ Average measurement time: 12 minutes
        </Text>
        <Text style={styles.insightText}>
          ‚Ä¢ Most common roof type: Gable (45% of measurements)
        </Text>
      </View>
    </View>
  );

  const renderQuotes = () => (
    <View style={styles.reportContent}>
      <View style={styles.detailSection}>
        <Text style={styles.detailTitle}>Quote Performance</Text>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>Total Quotes:</Text>
          <Text style={styles.detailValue}>{reportData.quotes.total}</Text>
        </View>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>This Period:</Text>
          <Text style={styles.detailValue}>{reportData.quotes.thisMonth}</Text>
        </View>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>Total Value:</Text>
          <Text style={styles.detailValue}>{formatCurrency(reportData.quotes.totalValue)}</Text>
        </View>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>Average Quote:</Text>
          <Text style={styles.detailValue}>{formatCurrency(reportData.quotes.avgQuoteValue)}</Text>
        </View>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>Conversion Rate:</Text>
          <Text style={styles.detailValue}>{reportData.quotes.conversionRate}%</Text>
        </View>
      </View>

      <View style={styles.insightSection}>
        <Text style={styles.insightTitle}>üí° Recommendations</Text>
        <Text style={styles.insightText}>
          ‚Ä¢ Your conversion rate is strong at {reportData.quotes.conversionRate}%
        </Text>
        <Text style={styles.insightText}>
          ‚Ä¢ Consider premium material options to increase average quote value
        </Text>
        <Text style={styles.insightText}>
          ‚Ä¢ Follow up on pending quotes for better conversion
        </Text>
      </View>
    </View>
  );

  const renderRevenue = () => (
    <View style={styles.reportContent}>
      <View style={styles.detailSection}>
        <Text style={styles.detailTitle}>Revenue Analysis</Text>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>This Month:</Text>
          <Text style={styles.detailValue}>{formatCurrency(reportData.revenue.thisMonth)}</Text>
        </View>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>Last Month:</Text>
          <Text style={styles.detailValue}>{formatCurrency(reportData.revenue.lastMonth)}</Text>
        </View>
        
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>Growth:</Text>
          <Text style={[
            styles.detailValue,
            { color: reportData.revenue.growth >= 0 ? '#22c55e' : '#ef4444' }
          ]}>
            {reportData.revenue.growth >= 0 ? '+' : ''}{reportData.revenue.growth}%
          </Text>
        </View>
      </View>

      <View style={styles.chartPlaceholder}>
        <Text style={styles.chartIcon}>üìà</Text>
        <Text style={styles.chartText}>Revenue Chart</Text>
        <Text style={styles.chartSubtext}>Visual analytics coming soon</Text>
      </View>
    </View>
  );

  const renderReportContent = () => {
    switch (selectedReport) {
      case 'measurements':
        return renderMeasurements();
      case 'quotes':
        return renderQuotes();
      case 'revenue':
        return renderRevenue();
      default:
        return renderOverview();
    }
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Business Reports</Text>
        <Text style={styles.headerSubtitle}>Track your performance and growth</Text>
      </View>

      {/* Period Selector */}
      <View style={styles.periodSelector}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {periods.map(period => (
            <TouchableOpacity
              key={period.key}
              style={[
                styles.periodButton,
                selectedPeriod === period.key && styles.periodButtonActive
              ]}
              onPress={() => setSelectedPeriod(period.key as ReportPeriod)}
            >
              <Text style={[
                styles.periodButtonText,
                selectedPeriod === period.key && styles.periodButtonTextActive
              ]}>
                {period.label}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      {/* Report Type Tabs */}
      <View style={styles.tabContainer}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {reportTypes.map(type => (
            <TouchableOpacity
              key={type.key}
              style={[
                styles.tab,
                selectedReport === type.key && styles.activeTab
              ]}
              onPress={() => setSelectedReport(type.key as ReportType)}
            >
              <Text style={styles.tabIcon}>{type.icon}</Text>
              <Text style={[
                styles.tabText,
                selectedReport === type.key && styles.activeTabText
              ]}>
                {type.label}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      {/* Report Content */}
      <ScrollView style={styles.contentContainer}>
        {renderReportContent()}
      </ScrollView>

      {/* Export Actions */}
      <View style={styles.exportActions}>
        <TouchableOpacity
          style={styles.exportButton}
          onPress={() => handleExportReport('share')}
        >
          <Text style={styles.exportButtonText}>Share Report</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={styles.exportButton}
          onPress={() => handleExportReport('pdf')}
        >
          <Text style={styles.exportButtonText}>Export PDF</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={styles.exportButton}
          onPress={() => handleExportReport('csv')}
        >
          <Text style={styles.exportButtonText}>Export CSV</Text>
        </TouchableOpacity>
      </View>

      <TouchableOpacity 
        style={styles.backButton}
        onPress={() => navigation.goBack()}
      >
        <Text style={styles.backButtonText}>Go Back</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f6f8fc',
  },
  header: {
    backgroundColor: '#234e70',
    padding: 24,
    paddingTop: 40,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 16,
    color: '#e5e7eb',
  },
  periodSelector: {
    backgroundColor: 'white',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  periodButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    marginRight: 8,
    borderRadius: 20,
    backgroundColor: '#f3f4f6',
  },
  periodButtonActive: {
    backgroundColor: '#234e70',
  },
  periodButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6b7280',
  },
  periodButtonTextActive: {
    color: 'white',
  },
  tabContainer: {
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  tab: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    marginRight: 4,
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: '#234e70',
  },
  tabIcon: {
    fontSize: 16,
    marginRight: 8,
  },
  tabText: {
    fontSize: 16,
    color: '#6b7280',
    fontWeight: '500',
  },
  activeTabText: {
    color: '#234e70',
    fontWeight: '600',
  },
  contentContainer: {
    flex: 1,
  },
  reportContent: {
    padding: 16,
  },
  metricsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
    marginBottom: 24,
  },
  metricCard: {
    backgroundColor: 'white',
    padding: 16,
    borderRadius: 12,
    flex: 1,
    minWidth: '45%',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#e5e7eb',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  metricIcon: {
    fontSize: 24,
    marginBottom: 8,
  },
  metricValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#374151',
    marginBottom: 4,
  },
  metricLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#6b7280',
    marginBottom: 2,
  },
  metricSubtext: {
    fontSize: 12,
    color: '#9ca3af',
  },
  summarySection: {
    backgroundColor: 'white',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#e5e7eb',
  },
  summaryTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 12,
  },
  summaryText: {
    fontSize: 14,
    lineHeight: 20,
    color: '#6b7280',
  },
  detailSection: {
    backgroundColor: 'white',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#e5e7eb',
  },
  detailTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 16,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#f3f4f6',
  },
  detailLabel: {
    fontSize: 14,
    color: '#6b7280',
  },
  detailValue: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
  },
  insightSection: {
    backgroundColor: '#f0f9f4',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#22c55e',
  },
  insightTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#15803d',
    marginBottom: 12,
  },
  insightText: {
    fontSize: 14,
    color: '#166534',
    marginBottom: 6,
    lineHeight: 18,
  },
  chartPlaceholder: {
    backgroundColor: 'white',
    padding: 32,
    borderRadius: 12,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#e5e7eb',
    borderStyle: 'dashed',
  },
  chartIcon: {
    fontSize: 48,
    marginBottom: 16,
  },
  chartText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  chartSubtext: {
    fontSize: 14,
    color: '#9ca3af',
  },
  exportActions: {
    flexDirection: 'row',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: 'white',
    borderTopWidth: 1,
    borderTopColor: '#e5e7eb',
    gap: 8,
  },
  exportButton: {
    flex: 1,
    backgroundColor: '#234e70',
    paddingVertical: 10,
    borderRadius: 8,
    alignItems: 'center',
  },
  exportButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '500',
  },
  backButton: {
    margin: 16,
    backgroundColor: '#6b7280',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  backButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
});